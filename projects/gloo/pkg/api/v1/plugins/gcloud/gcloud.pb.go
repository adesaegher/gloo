// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/plugins/gcloud/gcloud.proto

package gcloud

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for Gcloud Gfunc Upstreams
// Gcloud Upstreams represent a collection of Gfunc Functions for a particular Gcloud Account (IAM Role or User account)
// in a particular region
type UpstreamSpec struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,proto3" json:"project_id,omitempty"`
	// The Gcloud Region where the desired Gfunc Functions exist
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// A [Gloo Secret Ref](https://gloo.solo.io/introduction/concepts/#Secrets) to an Gcloud Secret
	// Gcloud Secrets can be created with `glooctl secret create gcloud ...`
	// If the secret is created manually, it must conform to the following structure:
	//  ```
	//  access_key: <gcloud access key>
	//  json_key: <gcloud secret key>
	//  ```
	SecretRef core.ResourceRef `protobuf:"bytes,2,opt,name=secret_ref,json=secretRef,proto3" json:"secret_ref"`
	// The list of Gfunc Functions contained within this region.
	// This list will be automatically populated by Gloo if discovery is enabled for Gcloud Gfunc Functions
	GfuncFunctions      []*GfuncFunctionSpec `protobuf:"bytes,3,rep,name=gfunc_functions,json=gfuncFunctions,proto3" json:"gfunc_functions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSpec, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (m *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(m, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

func (m *UpstreamSpec) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpstreamSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *UpstreamSpec) GetSecretRef() core.ResourceRef {
	if m != nil {
		return m.SecretRef
	}
	return core.ResourceRef{}
}

func (m *UpstreamSpec) GetGfuncFunctions() []*GfuncFunctionSpec {
	if m != nil {
		return m.GfuncFunctions
	}
	return nil
}

// Each Gfunc Function Spec contains data necessary for Gloo to invoke Gfunc functions:
// - name of the function
// - qualifier for the function
type GfuncFunctionSpec struct {
	// the logical name gloo should associate with this function. if left empty, it will default to
	// gfunc_function_name+qualifier
	LogicalName string `protobuf:"bytes,1,opt,name=logical_name,json=logicalName,proto3" json:"logical_name,omitempty"`
	// The Name of the Gfunc Function as it appears in the Gcloud Gfunc Portal
	GfuncFunctionName string `protobuf:"bytes,2,opt,name=gfunc_function_name,json=gfuncFunctionName,proto3" json:"gfunc_function_name,omitempty"`
        Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GfuncFunctionSpec) Reset()         { *m = GfuncFunctionSpec{} }
func (m *GfuncFunctionSpec) String() string { return proto.CompactTextString(m) }
func (*GfuncFunctionSpec) ProtoMessage()    {}
func (*GfuncFunctionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSpec, []int{1}
}
func (m *GfuncFunctionSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GfuncFunctionSpec.Unmarshal(m, b)
}
func (m *GfuncFunctionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GfuncFunctionSpec.Marshal(b, m, deterministic)
}
func (m *GfuncFunctionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfuncFunctionSpec.Merge(m, src)
}
func (m *GfuncFunctionSpec) XXX_Size() int {
	return xxx_messageInfo_GfuncFunctionSpec.Size(m)
}
func (m *GfuncFunctionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GfuncFunctionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GfuncFunctionSpec proto.InternalMessageInfo

func (m *GfuncFunctionSpec) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *GfuncFunctionSpec) GetGfuncFunctionName() string {
	if m != nil {
		return m.GfuncFunctionName
	}
	return ""
}

func (m *GfuncFunctionSpec) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Each Gfunc Function Spec contains data necessary for Gloo to invoke Gfunc functions
type DestinationSpec struct {
	// The Logical Name of the GfuncFunctionSpec to be invoked.
	LogicalName string `protobuf:"bytes,1,opt,name=logical_name,json=logicalName,proto3" json:"logical_name,omitempty"`

        Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`

	// de-jsonify response bodies returned from gcloud gfunc
	ResponseTransformation bool     `protobuf:"varint,5,opt,name=response_transformation,json=responseTransformation,proto3" json:"response_transformation,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *DestinationSpec) Reset()         { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()    {}
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSpec, []int{2}
}
func (m *DestinationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSpec.Unmarshal(m, b)
}
func (m *DestinationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSpec.Marshal(b, m, deterministic)
}
func (m *DestinationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSpec.Merge(m, src)
}
func (m *DestinationSpec) XXX_Size() int {
	return xxx_messageInfo_DestinationSpec.Size(m)
}
func (m *DestinationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSpec proto.InternalMessageInfo

func (m *DestinationSpec) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *DestinationSpec) GetResponseTransformation() bool {
	if m != nil {
		return m.ResponseTransformation
	}
	return false
}

func init() {
	proto.RegisterEnum("gcloud.plugins.gloo.solo.io.DestinationSpec_InvocationStyle", DestinationSpec_InvocationStyle_name, DestinationSpec_InvocationStyle_value)
	proto.RegisterType((*UpstreamSpec)(nil), "gcloud.plugins.gloo.solo.io.UpstreamSpec")
	proto.RegisterType((*GfuncFunctionSpec)(nil), "gcloud.plugins.gloo.solo.io.GfuncFunctionSpec")
	proto.RegisterType((*DestinationSpec)(nil), "gcloud.plugins.gloo.solo.io.DestinationSpec")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/plugins/gcloud/gcloud.proto", fileDescriptorSpec)
}

var fileDescriptorSpec = []byte{
        // 197 bytes of a gzipped FileDescriptorProto
        0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8e, 0xcd, 0x4a, 0xc5, 0x30,
        0x10, 0x85, 0xa9, 0x42, 0xa1, 0x43, 0x17, 0x12, 0x44, 0x8a, 0xa0, 0x94, 0xae, 0x44, 0x30, 0x51,
        0x7c, 0x03, 0x41, 0xc1, 0xad, 0xe2, 0xc6, 0x8d, 0xb4, 0x69, 0x18, 0xa3, 0x69, 0x66, 0xc8, 0x8f,
        0xcf, 0xe4, 0x73, 0xdd, 0x27, 0xb9, 0x34, 0xed, 0xee, 0xcc, 0x9c, 0xc3, 0xc7, 0x07, 0x10, 0xd9,
        0x68, 0xc9, 0x81, 0x12, 0x09, 0x81, 0x8e, 0x48, 0x8e, 0x6c, 0x25, 0x12, 0xa1, 0x33, 0xf2, 0xef,
        0xe1, 0xf2, 0x1c, 0x09, 0xa9, 0xd4, 0x6a, 0x4d, 0xdb, 0x72, 0x78, 0x86, 0xf6, 0x83, 0x63, 0x0a,
        0x66, 0x5c, 0xde, 0xd9, 0x68, 0x71, 0x01, 0x75, 0x30, 0x68, 0xc9, 0x77, 0x55, 0x5f, 0xdd, 0x34,
        0x6f, 0xfb, 0x25, 0xae, 0x00, 0x38, 0xd0, 0x8f, 0xd1, 0xe9, 0xcb, 0xce, 0xdd, 0x49, 0xe9, 0x9a,
        0xfd, 0xf3, 0x3a, 0x0f, 0x3d, 0xb4, 0x2f, 0xd9, 0xeb, 0x64, 0xc9, 0x17, 0xcc, 0x19, 0x9c, 0xe6,
        0xe0, 0x76, 0xc6, 0x1a, 0x9f, 0xee, 0xff, 0x0f, 0xd7, 0xd5, 0xe7, 0x2d, 0xda, 0xf4, 0x9d, 0x27,
        0xa9, 0x69, 0x51, 0x91, 0x1c, 0xdd, 0x59, 0x52, 0xab, 0xab, 0xe2, 0x5f, 0x54, 0xec, 0x32, 0x5a,
        0x1f, 0xd5, 0xe6, 0x3c, 0xd5, 0xc5, 0xf0, 0xf1, 0x18, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x64, 0x39,
        0x67, 0xd9, 0x00, 0x00, 0x00,
}

func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !this.SecretRef.Equal(&that1.SecretRef) {
		return false
	}
	if len(this.GfuncFunctions) != len(that1.GfuncFunctions) {
		return false
	}
	for i := range this.GfuncFunctions {
		if !this.GfuncFunctions[i].Equal(that1.GfuncFunctions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GfuncFunctionSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GfuncFunctionSpec)
	if !ok {
		that2, ok := that.(GfuncFunctionSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LogicalName != that1.LogicalName {
		return false
	}
	if this.GfuncFunctionName != that1.GfuncFunctionName {
		return false
	}
	if this.Qualifier != that1.Qualifier {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DestinationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DestinationSpec)
	if !ok {
		that2, ok := that.(DestinationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LogicalName != that1.LogicalName {
		return false
	}
	if this.InvocationStyle != that1.InvocationStyle {
		return false
	}
	if this.ResponseTransformation != that1.ResponseTransformation {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
